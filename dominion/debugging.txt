Debugging Report with GDB:
	I. First Bug (Adventuruer Card section in CardEffect() )
		a. Found a bug in CardEffect function adventurer section:
			When I wrote random tests for the adventurer card, I only checked the card effect that allows the player to 
		reveal two trueature cards from the player deck. To test that, I checked playe's hand count and player's hand 
		card. The test results showed that the player did not get right hand count.
		
		b. Debugging Procedures
		   Before debugged the dominion.c, I first thought about where the bug come from. I came up with two assumptions:
		Gmae Initialization Error and Card Effect Error.
			
			1. Debug Game Initialization
				Since only the player's hand count showed error, I set up two break points before the CardEffect fucntion.
			One is after the function initializeGame() at line 42 of randomtestadventurer.c; another one is after I randomly 
			generate the player's hand count at line 45 of randomtestadventurer.c. I called numHandCards(), which returned 
			the right results
			
			2. Debug Card Effect
				Then, I started to debug the CardEffect. I set up break point at line 774 of dominion.c to check whether the 
			player can get right number of treature cards. I found that there was no error here. Then, I set another break point
			in line 778 to check wheter the program reomve non-treature cards from the player's hand. There was also on error here.
			
				At that time, I thought it was a system error. So, I ran my random tests for thousands of time. However, wrong hand
			count returned every time. I decided to test more specifically. I reset all those break points and checked the hand count
			and hand card. I noticed that the card adventurer was still in the player's hand after the player got two treature cards. 
			This fact occured all the time. I reviewed the dominion.c and found that the CardEffect() did not discard the adventurer
			card from the player's hand. I added the discard function and the random test passed for thousands of time. 
		
		c. Related Agan's Rules
			Rule#1 "Understand the System"
				I fully read the card effect of the card adventurer to understand the program's actions in cardEffect. 
		
			Rule#2 "Make it Fail"
				I only focus on the CardEffect but ignore other details. I should consider all possible failure factors.
				
			Rule#5 "Change One Thing at a Time"
				I break possible failure cases into different parts to debug (initializeGame () and cardeffect()). This fact reduces 
			the debug time and make debugging easier and more efficient.

			Rule#8 "Get a Fresh View"
				I did not give up when I cannot localize the bug. I changed my debugging view (from hand count to actul hand cards). 
			This trick helped me to find the bug.

			Rule#9 "If You Didn't Fix It, It Ain't Fixed"
				When I found the bug, I fixed it immediately. Then, I did another tests to check the fixed program to make sure that my 
			solution worked well.
	

	
	II. Second Bug (_cardEffect_great_hall() Function)
		a. Bug was Found by jiangzh
			This bug was found by one of my group member, Zhi Jiang. According to his bug report, the player's hand count was wrong
		after played the card great hall.
		
		b. Debugging Procedures
		   I choose the same debugging strategies that I used in debugging the adventurer card. In this debugging session, I used my 
		   testdominion.c and dominion.c as work targets.
			
			1. Debugging Game Initialization
				Same procedures in section I.b.1. I found no bug here.
				
			2. Debugging Card Effect 
				I went to the cardEffect () 's great hall case to set two break points at line 1017 and line 1019. Then, I inspected the player's 
			hand and hand count for two times. I found that the player did not draw any new card after the card great_hall was played. 
			Then, I checked my _cardEffect_great_hall function for more details about the the program's behaviors when the card great_hall 
			was played. I compared the card  effects of great_hall with the parogram actions in _cardEffect_great_hall() line by line. I found 
			that the _cardEffect_great_hall function did not perform any draw card action. The bug was found.
				To fix this bug, I added a drawcard() function in the function _cardEffect_great_hall () before changing the action phase number.
				The next thing I did was to check whether the bug is solved or not. I added several contional asserts in my testdominion.c to 
			examine the card effect of greate hall. All attributes of the player were correct including, hand card, hand count, and deck count.
			
		c. Related Agan's Rules
			Rule#1 "Understand the System"
				When I debugged _cardEffect_great_hall (), the knowledge of the card effect of great hall helped me to identify what the card effect
			function missed. Thus, I can localize the bug and fixed it.
			
			Rule#4 "Divide and Conquer"
				When I was debugging the card effect, I started from the general CardEffect function in dominion.c and narrowed dwon to case great hall.
			Finially, I reached the target function _cardEffect_great_hall () to localize the bug.
			
			Rule#5 "Check One Thing at a Time"
				I break possible failure cases into different parts to debug (initializeGame () ann cardeffect). This fact reduces the debug time and 
			make debugging easier and more efficient.
			
			Rule#9 "If You Didn't Fix It, It Ain't Fixed"
				When I found the bug, I fixed it immediately. Then, I did another tests to check the fixed program to make sure that my solution worked 
			well.
				
	
   III. Third Bug (_cardEffect_minion () Function)
			a. Bug Found by liujiaw
				This bug was found by one of my group members, Jiawei Liu. According to his bug report, the player's hand cards always had a same card after 
			or could not get any card after the card minion card was played.
			
			b. Debugging Procedures
				I choose the same debugging strategies that I used in debugging the adventurer card. In this debugging session, I used my testdominion.c and 
					dominion.c as work targets.
				
				1. Debugging Game Initialization
					Same procedures in section I.b.1. No bug was found. 
				
				2. Debugging Card Effect
					I first set break points at line 1070 and line 1072 to compare the player's hand cards. There was one card that was in player's hand before
				and after the card minion was played. Additionaly, This duplicated card was in same index. At first, I assumed that it was a special case about
				drawing card from the player's deck. However, it continusly happened for lots of time. So, I narrowed the debugging range to the card effect
				function, _cardEffect_minion (). I set break points at line 707, line 712, and line 718 of dominion.c to inspect the game object. When I inspect 
				the game at line 712, I found the bug. Codes between line 707 and line 712 in dominion.c should clear all player's hand cards. However, my dominion.c
				left one card in the player's hand. This bug was caused by the wrong while loop conditional statement. The correct should be "while(numHandCards(state) > 0)"
				, but my statement is "while(numHandCards(state) > 1)". 
					To fix this bug, I just corrected the conditional statement in the while loop.
					Then, I recompile testdominion.c to inspect the game object with the same debugging break points. Those data was correct. I also asked my group 
				members to test the card effect of minion with their tests. All test about minion card were passed.
				
			c. Related Agan's Rules 
				Rule#1 "Understand the System"
				When debugged _cardEffect_minion(), I read the dominion rules about the minion action card. Consequently, I can understand the codes action to debug 
			accurately.
				
				Rule#4 "Divide and Conquer"
				When I was debugging the card effect, I started from the general CardEffect function in dominion.c and narrowed dwon to case minion. Finially, I reached 
			the target part of the function _cardEffect_minion () to localize the bug.
			
				Rule#7 "Check the plug"
				When I fixed the bug, I tried both my tester and my partner's tester to make sure the the bug was totally fixed. Trying different testers helped me to avoid
			special situations that occured in my testers or my partner's testers. 
			
			
				

				
				
			
			
			
			
			
			
			
				
		
